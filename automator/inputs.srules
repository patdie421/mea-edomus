** initialisation
INITDONE is: <NOP> if: ({INITFAIT} == &true) onmatch: moveforward 'APRESINIT'
   ** initialisation des compteurs
   CPTR1 is: #0
   SURCONSO is: &false
   BUTTON003 is: &false
   BUTTON005 is: &false
   ** fin initialisation
   INITFAIT is: &true
APRESINIT is: <LABEL>

** filtre(s)
FILTRE1 is: <NOP> if: ($xplmsgdata[] == &false) onmatch: moveforward 'NOTXPLMSG'  ** pas de données xpl
FILTRE2 is: <NOP> if: (schema == 'hbeat.app') onmatch: break
FILTRE3 is: <NOP> if: (schema == 'watchdog.basic') onmatch: break

**  Evénements prioritaires
BUTTON001 is: current if: (device == 'BUTTON001') onmatch: break
BUTTON002 is: current if: (device == 'BUTTON002') onmatch: break
BUTTON003 is: current if: (device == 'BUTTON003') onmatch: break
LAMPE4S   is: current if: (device == 'LAMPE4S') onmatch: break ** indicateur état d'une lampe

** variables pour tous
SOIREE is: &false
SOIREE is: &true  if: ($now[] >  $time['19:00:00'], $now[] <= $time['23:00:00'])
JOURNUIT is: &false
JOURNUIT is: &true  if: ($now[] >  $sunrise[#+30], $now[] <= $sunset[#-30])

** collecte des températures
TEMP01 is: current if: (device == 'xtemp01')   onmatch: break
TEMP02 is: current if: (device == 'xtemp02')   onmatch: break
TEMP03 is: current if: (device == 'temp01')    onmatch: break
TEMP04 is: current if: (device == 'temp02')    onmatch: break

** collecte états des piles
PILE1 is: current if: (device == 'xpile01')    onmatch: break
PILE2 is: current if: (device == 'xpile02')    onmatch: break
PILE3 is: current if: (device == 'batterie01') onmatch: break

** collecte humidités
HUMI01 is: current if: (device == 'xhumi01')   onmatch: break
HUMI02 is: current if: (device == 'xhumi02')   onmatch: break

THERMM is: &false if: (device == 'mode01', current!=#3) onmatch: break
THERMM is: &true  if: (device == 'mode01', current==#3) onmatch: break

** collecte consommation/production
PRODE  is: current if: (device == 'PROD',  type == 'energy')
PRODP  is: current if: (device == 'PROD',  type == 'power')
CONSOE is: current if: (device == 'CONSO', type == 'energy')
CONSOP is: current if: (device == 'CONSO', type == 'power')

VAETVIENT1 is: current if: (device == 'BUTTON004')
VAETVIENT1 is: current if: (device == 'BUTTON005')
BUTTON005  is: current if: (device == 'BUTTON005')


**
** traitements
**
SURCONSO is: &false   if: (device == 'CONSO', type == 'power', {SOIREE} == &true, current <= #600.0)
SURCONSO is: &true    if: (device == 'CONSO', type == 'power', {SOIREE} == &true, current > #600.0)

** évolution des timers et calculs divers
NOTXPLMSG is: <LABEL>
   MIDI   is: $time['12:00:00']
   TIMER1 is: $timer['timer1']
   TIMER41 is: $timer['timer41']
   TIMER3 is: $timer['timer3']
   ALARM1 is: $timer['alarm1']
   CPTR1  is: $calcn['{CPTR1}+#1']

**
** initialisation des timers et sorties
**
A1 do: timerCtrl with: ( command = 'start', name = 'alarm1', mode = 'alarm', value={MIDI}) when: MIDI change
T1 do: timerCtrl with: ( command = 'start', name = 'timer1', unit = 'sec', value=#5 ) when: INITFAIT new
O1 do: xPLSend   with: ( device = 'TEST2A', schema = 'control.basic', current='low', type='output' ) when: INITFAIT new

**
** actions a chaque changement
**

** gestion des timers
T1 do: timerCtrl with: ( command = 'start', name = 'timer1', unit = 'msec', value=#5000 ) when: TIMER1 rise
T1 do: xPLSend with: ( device = 'TOTO', schema = 'control.basic', current='high', type='output' ) when: TIMER1 rise

** actions surconsommation
O1 do: xPLSend with: ( device = 'TEST2A', schema = 'control.basic', current='high', type='output' ) when: SURCONSO rise
O1 do: xPLSend with: ( device = 'TEST2A', schema = 'control.basic', current='low',  type='output' ) when: SURCONSO fall
O1 do: xPLSend with: ( device = 'TEST2A', schema = 'control.basic', current='low',  type='output' ) when: SOIREE fall

** actions button
O4 do: xPLSend with: ( device = 'LAMPE1', schema = 'control.basic', current=$tohlstr[{BUTTON001}], type='output' ) when: BUTTON001 change
O5 do: xPLSend with: ( device = 'LAMPE2', schema = 'control.basic', current=$tohlstr[{BUTTON002}], type='output' ) when: BUTTON002 change
O6 do: xPLSend with: ( device = 'LAMPE4', schema = 'control.basic', current=$tohlstr[{VAETVIENT1}], type='output' ) when: VAETVIENT1 change

** minuterie
** on allume ou on eteint la lampe en fonction de l'action sur BUTTON003
O3 do: xPLSend with: ( device = 'LAMPE3', schema = 'control.basic', current=$tohlstr[{BUTTON003}], type='output' ) when: BUTTON003 change
** si l'action est d'allumer la lampe, on demarre le timer
T3 do: timerCtrl with: ( command = 'start', name = 'timer3', unit = 'sec', value=#5 ) when: BUTTON003 rise
** si l'action est d'éteindre la lampe, on arrête le timer
T3 do: timerCtrl with: ( command = 'stop',  name = 'timer3') when: BUTTON003 fall
** si le timer arrive a écheance (on éteint la lampe et on met a jour boutton003 (sinon on ne pourra pas ralumer avec un bouton on/off ...)
O3 do: xPLSend with: ( device = 'LAMPE3', schema = 'control.basic', current='low', type='output' ) when: TIMER3 rise
** minuterie reamorsable
I3 do: setInput with: ( name = 'BUTTON003', value = &false, updatestate = &0) when: BUTTON003 rise
** minuterie non reamorsable
** I3 do: setInput with: ( name = 'BUTTON003', value = &false, updatestate = &0) when: TIMER3 rise

T41 do: timerCtrl with: ( command = 'start', name = 'timer41', unit = 'sec', value=#5 ) when: LAMPE4S rise
T41 do: timerCtrl with: ( command = 'stop', name = 'timer41') when: LAMPE4S fall
O41 do: xPLSend with:   ( device = 'LAMPE4', schema = 'control.basic', current = 'pulse', data1 = #13, type='output' ) when: TIMER41 rise

** test envoi de SMS
O4 do: xPLSend with: (device = 'sendsms', schema = 'sendmsg.basic', to='0661665082', body='thermostat passe en manuel' ) when: THERMM rise
